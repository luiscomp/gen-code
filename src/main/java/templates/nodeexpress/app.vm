var createError = require("http-errors");
var express = require("express");
var path = require("path");
var bodyParser = require("body-parser");
var cookieParser = require("cookie-parser");
var cookieSession = require("cookie-session");
var Keygrip = require("keygrip");
var compression = require("compression")

var indexRouter = require("./routes/index");
#foreach($rota in $rotas)
var ${rota.getNomeMinusculo()}Router = require("./routes/${rota.getNomeMinusculo()}");
#end

var log4js = require("log4js");
log4js.configure({
    appenders: { logger: { type: "file", filename: "logger.log" } },
    categories: { default: { appenders: ["logger"], level: "error" } }
});

var app = express();
app.disable("x-powered-by");
app.set("trust proxy", 1);

// view engine setup
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "pug");

app.use(log4js.connectLogger(log4js.getLogger("logger"), { level: "auto" }));
app.use(compression());
app.use(bodyParser.json({ type: "application/json", limit: "10mb" }));
app.use(bodyParser.urlencoded({ extended: true , type: "application/json"}));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));
app.use(cookieSession({
    name: "session",
    keys: new Keygrip(["node", "ws"], "SHA384", "base64"),
    httpOnly: true,
    expires: new Date(Date.now() + (24 + ((60 * 1000) * 60)))
}));
app.use(function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    res.header("Content-Type", "application/json; charset=UTF-8");
    req.header("Accept", "application/json; charset=UTF-8");
    next();
});

// app.use(require("./control/middlewares/ValidarAcesso"));

// routers
app.use("/", indexRouter);
#foreach($rota in $rotas)
app.use("/${rota.getNomeMinusculo()}", ${rota.getNomeMinusculo()}Router);
#end

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get("env") === "development" ? err : {};

    // render the error page
    res.header("Content-Type", "text/html; charset=utf-8");
    res.status(err.status || 500);
    res.render("error");
});

module.exports = app;