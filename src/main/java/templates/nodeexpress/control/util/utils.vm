var fs = require('fs')

const notBase64 = /[^A-Z0-9+\/=]/i;

/**
 * Salva um arquivo no ambiente local
 * @param {String} fileBase64 Arquivo em base64
 * @param {String} fileName Nome do arquivo com extenção
 * @param {String} dest Local para salvar o arquivo
 */
function salvarArquivo(fileBase64, fileName, dest) {
    var data = fileBase64.replace(/^data:image\/\w+;base64,/, "");
    var bufferImage = new Buffer(data, 'base64');

    return new Promise((resolve, reject) => {
        fs.writeFile(dest.concat(fileName), bufferImage, 'binary', function(error) {
            if(error) {
                reject(error.message)
            }
            resolve("Arquivo Salvo")
        })
    })
}

/**
 * Gera um nome baseado no tipo de arquivo passado para o instante atual
 * @param {String} prefixo Prefixo para identificar o tipo de arquivo
 * @param {String} arquivo Arquivo em base64
 */
function gerarNomeArquivo(prefixo, arquivo) {
    let date = new Date();
    return prefixo.concat(date.getFullYear()).concat(date.getMonth()).concat(date.getDate()).concat(date.getHours()).concat(date.getMinutes()).concat(date.getSeconds()).concat('.').concat(arquivo.split(',')[0].match(/:(.*?);/)[1].split('/')[1])
}

function isBase64(str) {
    let textBase64 = str.replace(/^data:image\/\w+;base64,/, "");
    assertString(textBase64);
    const len = textBase64.length;
    if (!len || len % 4 !== 0 || notBase64.test(textBase64)) {
        return false;
    }
    const firstPaddingChar = textBase64.indexOf('=');
    return firstPaddingChar === -1 || firstPaddingChar === len - 1 || (firstPaddingChar === len - 2 && textBase64[len - 1] === '=');
}

function assertString(input) {
    const isString = (typeof input === 'string' || input instanceof String);

    if (!isString) {
        let invalidType;
        if (input === null) {
            invalidType = 'null';
        } else {
            invalidType = typeof input;
            if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {
            invalidType = input.constructor.name;
            } else {
            invalidType = `a ${invalidType}`;
            }
        }
        throw new TypeError(`Expected string but received ${invalidType}.`);
    }
}

module.exports = {
    salvarArquivo,
    gerarNomeArquivo,
    isBase64
}
